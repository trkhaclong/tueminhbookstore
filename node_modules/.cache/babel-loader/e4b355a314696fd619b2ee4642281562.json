{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Dep Trai/Projects/tueminhbookstore/src/components/Common/SlideShow.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../assets/css/slideShow.css';\nexport default class Slideshow extends React.Component {\n  constructor(props) {\n    super(props);\n    /*\r\n    * State slideIndex dùng để xác định xem slide nào đang được active.\r\n    * Các ảnh sẽ được xếp chồng lên nhau, cái nào active thì hiển thị,\r\n    * Cái nào không active thì ẩn đi.\r\n    */\n\n    this.state = {\n      slideIndex: 0\n    };\n    /*\r\n    * Khi sử dụng, mình sẽ truyền thuộc tính ratio, giả sử là \"3:2\"\r\n    * Như vậy, tỉ lệ width/height là this.ratioWH = 3 / 2\r\n    * Mình sẽ điều chỉnh các ảnh sao cho về cùng 1 kích thước.\r\n    */\n\n    const ratioWHArray = this.props.ratio.split(\":\");\n    this.ratioWH = ratioWHArray[0] / ratioWHArray[1];\n    this.backward = this.backward.bind(this);\n    this.forward = this.forward.bind(this);\n    this.setSlideIndex = this.setSlideIndex.bind(this);\n    this.getNewSlideIndex = this.getNewSlideIndex.bind(this);\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.runAutomatic = this.runAutomatic.bind(this);\n  }\n  /*\r\n  * Tính chỉ số SlideIndex mới, với step là bước nhảy: +1 hoặc -1\r\n  * Giả sử, mình có 6 ảnh => các chỉ số lần lượt là: 0, 1, 2,...5\r\n  * Chú ý:\r\n  * Nếu đang ở chỉ số 5 mà đi về phía trước thì slideIndex = 0\r\n  * Nếu đang ở chỉ số 0 mà về sau thì slideIndex = 5\r\n  */\n\n\n  getNewSlideIndex(step) {\n    const slideIndex = this.state.slideIndex;\n    const numberSlide = this.props.input.length;\n    let newSlideIndex = slideIndex + step;\n    if (newSlideIndex >= numberSlide) newSlideIndex = 0;else if (newSlideIndex < 0) newSlideIndex = numberSlide - 1;\n    return newSlideIndex;\n  } // Quay về ảnh phía trước, tức index giảm 1 => step = -1\n\n\n  backward() {\n    this.setState({\n      slideIndex: this.getNewSlideIndex(-1)\n    });\n  } // Tiến tới ảnh phía sau, tức index tăng 1 => step = 1\n\n\n  forward() {\n    this.setState({\n      slideIndex: this.getNewSlideIndex(1)\n    });\n  } // Xác định slideIndex nào sẽ được active\n\n\n  setSlideIndex(index) {\n    this.setState({\n      slideIndex: index\n    });\n  }\n  /*\r\n  * Cập nhật chiều cao cho container khi thay đổi kích thước màn hình\r\n  * Trong phần CSS, mình để container có width = 100%,\r\n  * Nên dù kéo to hay thu nhỏ thì width vẫn bằng 100%\r\n  * Nhưng chiều cao phải tính lại dựa vào width và tỉ lệ this.ratioWH\r\n  */\n\n\n  updateDimensions() {\n    this.containerElm.style.height = `${this.containerElm.offsetWidth / this.ratioWH}px`;\n  }\n  /*\r\n  * Nếu người dùng truyền vào thuộc tính mode = automatic\r\n  * thì Slideshow sẽ chạy tự động dựa vào interval.\r\n  * Hàm này sẽ được gọi trong mỗi lượt lặp lại\r\n  * để cập nhật slideIndex mới cho Slideshow\r\n  */\n\n\n  runAutomatic() {\n    this.setState({\n      slideIndex: this.getNewSlideIndex(1)\n    });\n  }\n  /*\r\n  * Hàm này thuộc về React Component Lifecycle\r\n  * được gọi sau khi component này được render xong\r\n  * Trong đây, sẽ lưu lại reference cho container - this.containerElm\r\n  * Cập nhật lại chiều cao cho container - this.updateDimensions();\r\n  * Đăng ký sự kiện thay đổi kích thước - resize\r\n  * Kiểm tra nếu mode === \"automatic\" thì sẽ tạo mới một interval\r\n  * để thay đổi hình ảnh - this.runAutomatic()\r\n  * với giá trị timeout được truyền từ props hoặc mặc định là 5000 ms\r\n  */\n\n\n  componentDidMount() {\n    this.rootElm = ReactDOM.findDOMNode(this);\n    this.containerElm = this.rootElm.querySelector(\".container\");\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions);\n\n    if (this.props.mode === \"automatic\") {\n      const timeout = this.props.timeout || 5000;\n      this.automaticInterval = setInterval(() => this.runAutomatic(), Number.parseInt(timeout));\n    }\n  }\n  /*\r\n  * Hàm này cũng thuộc về React Component Lifecycle -\r\n  * được gọi khi component này bị xóa khỏi màn hình\r\n  * Lúc này, mình phải hủy bỏ sự kiện khi resize\r\n  * và xóa bỏ interval đã khai bảo bên trên để tránh leak memory.\r\n  */\n\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions);\n    if (this.automaticInterval) clearInterval(this.automaticInterval);\n  }\n  /*\r\n  * Giao diện của component\r\n  * với phần tử ngoài cùng mình để className=\"lp-slideshow\"\r\n  * để tránh xung đột về tên với các component khác\r\n  */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lp-slideshow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }\n    }, this.props.input.map((image, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        className: `slide ${this.state.slideIndex === index ? \"active\" : \"\"}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"number-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 19\n        }\n      }, `${index + 1} / ${this.props.input.length}`), /*#__PURE__*/React.createElement(\"img\", {\n        className: \"image\",\n        src: image.src,\n        alt: image.caption,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 19\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"caption-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 19\n        }\n      }, image.caption));\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"prev\",\n      onClick: this.backward,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }\n    }, \"\\u276E\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"next\",\n      onClick: this.forward,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }\n    }, \"\\u276F\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dot-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }\n    }, this.props.input.map((_, index) => {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        key: index,\n        className: `dot ${this.state.slideIndex === index ? \"active\" : \"\"}`,\n        onClick: () => this.setSlideIndex(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }\n      });\n    })));\n  }\n\n}","map":{"version":3,"sources":["/mnt/c/Users/Dep Trai/Projects/tueminhbookstore/src/components/Common/SlideShow.js"],"names":["React","ReactDOM","Slideshow","Component","constructor","props","state","slideIndex","ratioWHArray","ratio","split","ratioWH","backward","bind","forward","setSlideIndex","getNewSlideIndex","updateDimensions","runAutomatic","step","numberSlide","input","length","newSlideIndex","setState","index","containerElm","style","height","offsetWidth","componentDidMount","rootElm","findDOMNode","querySelector","window","addEventListener","mode","timeout","automaticInterval","setInterval","Number","parseInt","componentWillUnmount","removeEventListener","clearInterval","render","map","image","src","caption","_"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../assets/css/slideShow.css';\r\n\r\nexport default class Slideshow extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    /*\r\n    * State slideIndex dùng để xác định xem slide nào đang được active.\r\n    * Các ảnh sẽ được xếp chồng lên nhau, cái nào active thì hiển thị,\r\n    * Cái nào không active thì ẩn đi.\r\n    */\r\n    this.state = {\r\n      slideIndex: 0\r\n    };\r\n\r\n    /*\r\n    * Khi sử dụng, mình sẽ truyền thuộc tính ratio, giả sử là \"3:2\"\r\n    * Như vậy, tỉ lệ width/height là this.ratioWH = 3 / 2\r\n    * Mình sẽ điều chỉnh các ảnh sao cho về cùng 1 kích thước.\r\n    */\r\n    const ratioWHArray = this.props.ratio.split(\":\");\r\n    this.ratioWH = ratioWHArray[0] / ratioWHArray[1];\r\n\r\n    this.backward = this.backward.bind(this);\r\n    this.forward = this.forward.bind(this);\r\n    this.setSlideIndex = this.setSlideIndex.bind(this);\r\n    this.getNewSlideIndex = this.getNewSlideIndex.bind(this);\r\n    this.updateDimensions = this.updateDimensions.bind(this);\r\n    this.runAutomatic = this.runAutomatic.bind(this);\r\n  }\r\n\r\n  /*\r\n  * Tính chỉ số SlideIndex mới, với step là bước nhảy: +1 hoặc -1\r\n  * Giả sử, mình có 6 ảnh => các chỉ số lần lượt là: 0, 1, 2,...5\r\n  * Chú ý:\r\n  * Nếu đang ở chỉ số 5 mà đi về phía trước thì slideIndex = 0\r\n  * Nếu đang ở chỉ số 0 mà về sau thì slideIndex = 5\r\n  */\r\n  getNewSlideIndex(step) {\r\n    const slideIndex = this.state.slideIndex;\r\n    const numberSlide = this.props.input.length;\r\n\r\n    let newSlideIndex = slideIndex + step;\r\n\r\n    if (newSlideIndex >= numberSlide) newSlideIndex = 0;\r\n    else if (newSlideIndex < 0) newSlideIndex = numberSlide - 1;\r\n\r\n    return newSlideIndex;\r\n  }\r\n\r\n  // Quay về ảnh phía trước, tức index giảm 1 => step = -1\r\n  backward() {\r\n    this.setState({\r\n      slideIndex: this.getNewSlideIndex(-1)\r\n    });\r\n  }\r\n\r\n  // Tiến tới ảnh phía sau, tức index tăng 1 => step = 1\r\n  forward() {\r\n    this.setState({\r\n      slideIndex: this.getNewSlideIndex(1)\r\n    });\r\n  }\r\n\r\n  // Xác định slideIndex nào sẽ được active\r\n  setSlideIndex(index) {\r\n    this.setState({\r\n      slideIndex: index\r\n    })\r\n  }\r\n\r\n  /*\r\n  * Cập nhật chiều cao cho container khi thay đổi kích thước màn hình\r\n  * Trong phần CSS, mình để container có width = 100%,\r\n  * Nên dù kéo to hay thu nhỏ thì width vẫn bằng 100%\r\n  * Nhưng chiều cao phải tính lại dựa vào width và tỉ lệ this.ratioWH\r\n  */\r\n  updateDimensions() {\r\n    this.containerElm.style.height \r\n      = `${this.containerElm.offsetWidth / this.ratioWH}px`;\r\n  }\r\n\r\n  /*\r\n  * Nếu người dùng truyền vào thuộc tính mode = automatic\r\n  * thì Slideshow sẽ chạy tự động dựa vào interval.\r\n  * Hàm này sẽ được gọi trong mỗi lượt lặp lại\r\n  * để cập nhật slideIndex mới cho Slideshow\r\n  */\r\n  runAutomatic() {\r\n    this.setState({\r\n      slideIndex: this.getNewSlideIndex(1)\r\n    });\r\n  }\r\n\r\n  /*\r\n  * Hàm này thuộc về React Component Lifecycle\r\n  * được gọi sau khi component này được render xong\r\n  * Trong đây, sẽ lưu lại reference cho container - this.containerElm\r\n  * Cập nhật lại chiều cao cho container - this.updateDimensions();\r\n  * Đăng ký sự kiện thay đổi kích thước - resize\r\n  * Kiểm tra nếu mode === \"automatic\" thì sẽ tạo mới một interval\r\n  * để thay đổi hình ảnh - this.runAutomatic()\r\n  * với giá trị timeout được truyền từ props hoặc mặc định là 5000 ms\r\n  */\r\n  componentDidMount() {\r\n    this.rootElm = ReactDOM.findDOMNode(this);\r\n    this.containerElm = this.rootElm.querySelector(\".container\");\r\n\r\n    this.updateDimensions();\r\n    window.addEventListener(\"resize\", this.updateDimensions);\r\n\r\n    if (this.props.mode === \"automatic\") {\r\n      const timeout = this.props.timeout || 5000;\r\n\r\n      this.automaticInterval = setInterval(\r\n        () => this.runAutomatic(),\r\n        Number.parseInt(timeout)\r\n      );\r\n    }\r\n  }\r\n\r\n  /*\r\n  * Hàm này cũng thuộc về React Component Lifecycle -\r\n  * được gọi khi component này bị xóa khỏi màn hình\r\n  * Lúc này, mình phải hủy bỏ sự kiện khi resize\r\n  * và xóa bỏ interval đã khai bảo bên trên để tránh leak memory.\r\n  */\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateDimensions);\r\n    if (this.automaticInterval) clearInterval(this.automaticInterval);\r\n  }\r\n\r\n  /*\r\n  * Giao diện của component\r\n  * với phần tử ngoài cùng mình để className=\"lp-slideshow\"\r\n  * để tránh xung đột về tên với các component khác\r\n  */\r\n  render() {\r\n    return (\r\n      <div className=\"lp-slideshow\">\r\n        <div className=\"container\">\r\n          {\r\n            this.props.input.map((image, index) => {\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  className={\r\n                    `slide ${this.state.slideIndex === index ? \"active\" : \"\"}`\r\n                  }\r\n                >\r\n                  <div className=\"number-text\">\r\n                    {`${index + 1} / ${this.props.input.length}`}\r\n                  </div>\r\n                  <img className=\"image\" src={image.src} alt={image.caption} />\r\n                  <div className=\"caption-text\">{image.caption}</div>\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n\r\n          <span className=\"prev\" onClick={this.backward}>❮</span>\r\n          <span className=\"next\" onClick={this.forward}>❯</span>\r\n        </div>\r\n\r\n        <div className=\"dot-container\">\r\n          {\r\n            this.props.input.map((_, index) => {\r\n              return (\r\n                <span\r\n                  key={index}\r\n                  className={\r\n                    `dot ${this.state.slideIndex === index ? \"active\" : \"\"}`\r\n                  }\r\n                  onClick={() => this.setSlideIndex(index)}\r\n                >\r\n                </span>\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}