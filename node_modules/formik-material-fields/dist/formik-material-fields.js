(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@material-ui/core/FormGroup'), require('@material-ui/core/Checkbox'), require('@material-ui/core/Radio'), require('@material-ui/core/RadioGroup'), require('@material-ui/core/FormControl'), require('@material-ui/core/FormControlLabel'), require('@material-ui/core/FormHelperText'), require('@material-ui/core/FormLabel'), require('@material-ui/core/styles'), require('@material-ui/core/MenuItem'), require('@material-ui/core/TextField'), require('@material-ui/core/Switch'), require('react'), require('formik')) :
  typeof define === 'function' && define.amd ? define(['exports', '@material-ui/core/FormGroup', '@material-ui/core/Checkbox', '@material-ui/core/Radio', '@material-ui/core/RadioGroup', '@material-ui/core/FormControl', '@material-ui/core/FormControlLabel', '@material-ui/core/FormHelperText', '@material-ui/core/FormLabel', '@material-ui/core/styles', '@material-ui/core/MenuItem', '@material-ui/core/TextField', '@material-ui/core/Switch', 'react', 'formik'], factory) :
  (factory((global.FormikMaterialFields = {}),global.FormGroup,global.Checkbox,global.Radio,global.RadioGroup,global.FormControl,global.FormControlLabel,global.FormHelperText,global.FormLabel,global.styles,global.MenuItem,global.MatTextField,global.Switch,global.React,global.formik));
}(this, (function (exports,FormGroup,Checkbox,Radio,RadioGroup,FormControl,FormControlLabel,FormHelperText,FormLabel,styles,MenuItem,MatTextField,Switch,React,formik) { 'use strict';

  FormGroup = FormGroup && FormGroup.hasOwnProperty('default') ? FormGroup['default'] : FormGroup;
  Checkbox = Checkbox && Checkbox.hasOwnProperty('default') ? Checkbox['default'] : Checkbox;
  Radio = Radio && Radio.hasOwnProperty('default') ? Radio['default'] : Radio;
  RadioGroup = RadioGroup && RadioGroup.hasOwnProperty('default') ? RadioGroup['default'] : RadioGroup;
  FormControl = FormControl && FormControl.hasOwnProperty('default') ? FormControl['default'] : FormControl;
  FormControlLabel = FormControlLabel && FormControlLabel.hasOwnProperty('default') ? FormControlLabel['default'] : FormControlLabel;
  FormHelperText = FormHelperText && FormHelperText.hasOwnProperty('default') ? FormHelperText['default'] : FormHelperText;
  FormLabel = FormLabel && FormLabel.hasOwnProperty('default') ? FormLabel['default'] : FormLabel;
  MenuItem = MenuItem && MenuItem.hasOwnProperty('default') ? MenuItem['default'] : MenuItem;
  MatTextField = MatTextField && MatTextField.hasOwnProperty('default') ? MatTextField['default'] : MatTextField;
  Switch = Switch && Switch.hasOwnProperty('default') ? Switch['default'] : Switch;
  React = React && React.hasOwnProperty('default') ? React['default'] : React;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  /* eslint-disable no-unused-vars */
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;

  function toObject(val) {
  	if (val === null || val === undefined) {
  		throw new TypeError('Object.assign cannot be called with null or undefined');
  	}

  	return Object(val);
  }

  function shouldUseNative() {
  	try {
  		if (!Object.assign) {
  			return false;
  		}

  		// Detect buggy property enumeration order in older V8 versions.

  		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
  		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
  		test1[5] = 'de';
  		if (Object.getOwnPropertyNames(test1)[0] === '5') {
  			return false;
  		}

  		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
  		var test2 = {};
  		for (var i = 0; i < 10; i++) {
  			test2['_' + String.fromCharCode(i)] = i;
  		}
  		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
  			return test2[n];
  		});
  		if (order2.join('') !== '0123456789') {
  			return false;
  		}

  		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
  		var test3 = {};
  		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
  			test3[letter] = letter;
  		});
  		if (Object.keys(Object.assign({}, test3)).join('') !==
  				'abcdefghijklmnopqrst') {
  			return false;
  		}

  		return true;
  	} catch (err) {
  		// We don't expect any of the above to throw, but better to be safe.
  		return false;
  	}
  }

  var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
  	var from;
  	var to = toObject(target);
  	var symbols;

  	for (var s = 1; s < arguments.length; s++) {
  		from = Object(arguments[s]);

  		for (var key in from) {
  			if (hasOwnProperty.call(from, key)) {
  				to[key] = from[key];
  			}
  		}

  		if (getOwnPropertySymbols) {
  			symbols = getOwnPropertySymbols(from);
  			for (var i = 0; i < symbols.length; i++) {
  				if (propIsEnumerable.call(from, symbols[i])) {
  					to[symbols[i]] = from[symbols[i]];
  				}
  			}
  		}
  	}

  	return to;
  };

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

  var ReactPropTypesSecret_1 = ReactPropTypesSecret;

  var printWarning = function() {};

  {
    var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
    var loggedTypeFailures = {};

    printWarning = function(text) {
      var message = 'Warning: ' + text;
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };
  }

  /**
   * Assert that the values match with the type specs.
   * Error messages are memorized and will only be shown once.
   *
   * @param {object} typeSpecs Map of name to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @param {string} componentName Name of the component for error messages.
   * @param {?Function} getStack Returns the component stack.
   * @private
   */
  function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    {
      for (var typeSpecName in typeSpecs) {
        if (typeSpecs.hasOwnProperty(typeSpecName)) {
          var error;
          // Prop type validation may throw. In case they do, we don't want to
          // fail the render phase where it didn't fail before. So we log it.
          // After these have been cleaned up, we'll let them throw.
          try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== 'function') {
              var err = Error(
                (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
                'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
              );
              err.name = 'Invariant Violation';
              throw err;
            }
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
          } catch (ex) {
            error = ex;
          }
          if (error && !(error instanceof Error)) {
            printWarning(
              (componentName || 'React class') + ': type specification of ' +
              location + ' `' + typeSpecName + '` is invalid; the type checker ' +
              'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
              'You may have forgotten to pass an argument to the type checker ' +
              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
              'shape all require an argument).'
            );

          }
          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;

            var stack = getStack ? getStack() : '';

            printWarning(
              'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
            );
          }
        }
      }
    }
  }

  var checkPropTypes_1 = checkPropTypes;

  var printWarning$1 = function() {};

  {
    printWarning$1 = function(text) {
      var message = 'Warning: ' + text;
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };
  }

  function emptyFunctionThatReturnsNull() {
    return null;
  }

  var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
    /* global Symbol */
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

    /**
     * Returns the iterator method function contained on the iterable object.
     *
     * Be sure to invoke the function with the iterable as context:
     *
     *     var iteratorFn = getIteratorFn(myIterable);
     *     if (iteratorFn) {
     *       var iterator = iteratorFn.call(myIterable);
     *       ...
     *     }
     *
     * @param {?object} maybeIterable
     * @return {?function}
     */
    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
      if (typeof iteratorFn === 'function') {
        return iteratorFn;
      }
    }

    /**
     * Collection of methods that allow declaration and validation of props that are
     * supplied to React components. Example usage:
     *
     *   var Props = require('ReactPropTypes');
     *   var MyArticle = React.createClass({
     *     propTypes: {
     *       // An optional string prop named "description".
     *       description: Props.string,
     *
     *       // A required enum prop named "category".
     *       category: Props.oneOf(['News','Photos']).isRequired,
     *
     *       // A prop named "dialog" that requires an instance of Dialog.
     *       dialog: Props.instanceOf(Dialog).isRequired
     *     },
     *     render: function() { ... }
     *   });
     *
     * A more formal specification of how these methods are used:
     *
     *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
     *   decl := ReactPropTypes.{type}(.isRequired)?
     *
     * Each and every declaration produces a function with the same signature. This
     * allows the creation of custom validation functions. For example:
     *
     *  var MyLink = React.createClass({
     *    propTypes: {
     *      // An optional string or URI prop named "href".
     *      href: function(props, propName, componentName) {
     *        var propValue = props[propName];
     *        if (propValue != null && typeof propValue !== 'string' &&
     *            !(propValue instanceof URI)) {
     *          return new Error(
     *            'Expected a string or an URI for ' + propName + ' in ' +
     *            componentName
     *          );
     *        }
     *      }
     *    },
     *    render: function() {...}
     *  });
     *
     * @internal
     */

    var ANONYMOUS = '<<anonymous>>';

    // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    var ReactPropTypes = {
      array: createPrimitiveTypeChecker('array'),
      bool: createPrimitiveTypeChecker('boolean'),
      func: createPrimitiveTypeChecker('function'),
      number: createPrimitiveTypeChecker('number'),
      object: createPrimitiveTypeChecker('object'),
      string: createPrimitiveTypeChecker('string'),
      symbol: createPrimitiveTypeChecker('symbol'),

      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker,
    };

    /**
     * inlined Object.is polyfill to avoid requiring consumers ship their own
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
     */
    /*eslint-disable no-self-compare*/
    function is(x, y) {
      // SameValue algorithm
      if (x === y) {
        // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return x !== 0 || 1 / x === 1 / y;
      } else {
        // Step 6.a: NaN == NaN
        return x !== x && y !== y;
      }
    }
    /*eslint-enable no-self-compare*/

    /**
     * We use an Error-like object for backward compatibility as people may call
     * PropTypes directly and inspect their output. However, we don't use real
     * Errors anymore. We don't inspect their stack anyway, and creating them
     * is prohibitively expensive if they are created too often, such as what
     * happens in oneOfType() for any type before the one that matched.
     */
    function PropTypeError(message) {
      this.message = message;
      this.stack = '';
    }
    // Make `instanceof Error` still work for returned errors.
    PropTypeError.prototype = Error.prototype;

    function createChainableTypeChecker(validate) {
      {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }
      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;

        if (secret !== ReactPropTypesSecret_1) {
          if (throwOnDirectAccess) {
            // New behavior only for users of `prop-types` package
            var err = new Error(
              'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
              'Use `PropTypes.checkPropTypes()` to call them. ' +
              'Read more at http://fb.me/use-check-prop-types'
            );
            err.name = 'Invariant Violation';
            throw err;
          } else if (typeof console !== 'undefined') {
            // Old behavior for people using React.PropTypes
            var cacheKey = componentName + ':' + propName;
            if (
              !manualPropTypeCallCache[cacheKey] &&
              // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3
            ) {
              printWarning$1(
                'You are manually calling a React.PropTypes validation ' +
                'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
                'and will throw in the standalone `prop-types` package. ' +
                'You may be seeing this warning due to a third-party PropTypes ' +
                'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
              );
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }
        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
            }
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
          }
          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }

      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);

      return chainedCheckType;
    }

    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== expectedType) {
          // `propValue` being instance of, say, date/regexp, pass the 'object'
          // check, but we can offer a more precise error message here rather than
          // 'of type `object`'.
          var preciseType = getPreciseType(propValue);

          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }

    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
        }
        var propValue = props[propName];
        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
        }
        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
          if (error instanceof Error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        if (!isValidElement(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        printWarning$1('Invalid argument supplied to oneOf, expected an instance of array.');
        return emptyFunctionThatReturnsNull;
      }

      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }

        var valuesString = JSON.stringify(expectedValues);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
      }
      return createChainableTypeChecker(validate);
    }

    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
        }
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
        }
        for (var key in propValue) {
          if (propValue.hasOwnProperty(key)) {
            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
            if (error instanceof Error) {
              return error;
            }
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.');
        return emptyFunctionThatReturnsNull;
      }

      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (typeof checker !== 'function') {
          printWarning$1(
            'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
            'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
          );
          return emptyFunctionThatReturnsNull;
        }
      }

      function validate(props, propName, componentName, location, propFullName) {
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
            return null;
          }
        }

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
      }
      return createChainableTypeChecker(validate);
    }

    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }
        for (var key in shapeTypes) {
          var checker = shapeTypes[key];
          if (!checker) {
            continue;
          }
          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
          if (error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createStrictShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }
        // We need to check all keys in case some are required but missing from
        // props.
        var allKeys = objectAssign({}, props[propName], shapeTypes);
        for (var key in allKeys) {
          var checker = shapeTypes[key];
          if (!checker) {
            return new PropTypeError(
              'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
              '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
              '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
            );
          }
          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
          if (error) {
            return error;
          }
        }
        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function isNode(propValue) {
      switch (typeof propValue) {
        case 'number':
        case 'string':
        case 'undefined':
          return true;
        case 'boolean':
          return !propValue;
        case 'object':
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }
          if (propValue === null || isValidElement(propValue)) {
            return true;
          }

          var iteratorFn = getIteratorFn(propValue);
          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;
            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              // Iterator will provide entry [k,v] tuples rather than values.
              while (!(step = iterator.next()).done) {
                var entry = step.value;
                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }

          return true;
        default:
          return false;
      }
    }

    function isSymbol(propType, propValue) {
      // Native Symbol.
      if (propType === 'symbol') {
        return true;
      }

      // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
      if (propValue['@@toStringTag'] === 'Symbol') {
        return true;
      }

      // Fallback for non-spec compliant Symbols which are polyfilled.
      if (typeof Symbol === 'function' && propValue instanceof Symbol) {
        return true;
      }

      return false;
    }

    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
      var propType = typeof propValue;
      if (Array.isArray(propValue)) {
        return 'array';
      }
      if (propValue instanceof RegExp) {
        // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return 'object';
      }
      if (isSymbol(propType, propValue)) {
        return 'symbol';
      }
      return propType;
    }

    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
      if (typeof propValue === 'undefined' || propValue === null) {
        return '' + propValue;
      }
      var propType = getPropType(propValue);
      if (propType === 'object') {
        if (propValue instanceof Date) {
          return 'date';
        } else if (propValue instanceof RegExp) {
          return 'regexp';
        }
      }
      return propType;
    }

    // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"
    function getPostfixForTypeWarning(value) {
      var type = getPreciseType(value);
      switch (type) {
        case 'array':
        case 'object':
          return 'an ' + type;
        case 'boolean':
        case 'date':
        case 'regexp':
          return 'a ' + type;
        default:
          return type;
      }
    }

    // Returns class name of the object, if any.
    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }
      return propValue.constructor.name;
    }

    ReactPropTypes.checkPropTypes = checkPropTypes_1;
    ReactPropTypes.PropTypes = ReactPropTypes;

    return ReactPropTypes;
  };

  var propTypes = createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  {
    var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
      Symbol.for &&
      Symbol.for('react.element')) ||
      0xeac7;

    var isValidElement = function(object) {
      return typeof object === 'object' &&
        object !== null &&
        object.$$typeof === REACT_ELEMENT_TYPE;
    };

    // By explicitly using `prop-types` you are opting into new development behavior.
    // http://fb.me/prop-types-in-prod
    var throwOnDirectAccess = true;
    module.exports = factoryWithTypeCheckers(isValidElement, throwOnDirectAccess);
  }
  });

  var classnames = createCommonjsModule(function (module) {
  /*!
    Copyright (c) 2017 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  */
  /* global define */

  (function () {

  	var hasOwn = {}.hasOwnProperty;

  	function classNames () {
  		var classes = [];

  		for (var i = 0; i < arguments.length; i++) {
  			var arg = arguments[i];
  			if (!arg) continue;

  			var argType = typeof arg;

  			if (argType === 'string' || argType === 'number') {
  				classes.push(arg);
  			} else if (Array.isArray(arg) && arg.length) {
  				var inner = classNames.apply(null, arg);
  				if (inner) {
  					classes.push(inner);
  				}
  			} else if (argType === 'object') {
  				for (var key in arg) {
  					if (hasOwn.call(arg, key) && arg[key]) {
  						classes.push(key);
  					}
  				}
  			}
  		}

  		return classes.join(' ');
  	}

  	if (module.exports) {
  		classNames.default = classNames;
  		module.exports = classNames;
  	} else {
  		window.classNames = classNames;
  	}
  }());
  });

  function toggle(collection, value) {
    var arr = _toConsumableArray(collection);

    var index = arr.findIndex(function (i) {
      return i === value;
    });

    if (index === -1) {
      arr.push(value);
    } else {
      arr.splice(index, 1);
    }

    return arr;
  }

  var fieldShape = propTypes.shape({
    name: propTypes.string,
    value: propTypes.any,
    onChange: propTypes.func,
    onBlur: propTypes.func
  });
  var formShape = propTypes.shape({
    touched: propTypes.object,
    errors: propTypes.object,
    setFieldTouched: propTypes.func
  });
  var optionShape = propTypes.shape({
    label: propTypes.node.isRequired,
    value: propTypes.any.isRequired
  });

  var s = (function (theme) {
    return _defineProperty({
      rowContainer: {
        flexDirection: 'row',
        alignItems: 'center'
      },
      rowLabel: {
        marginRight: theme.spacing.unit * 3
      },
      rowHelperText: {
        marginTop: 0
      }
    }, theme.breakpoints.down('sm'), {
      rowLabel: {
        marginRight: theme.spacing.unit * 2
      }
    });
  });

  var CheckboxGroupField =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(CheckboxGroupField, _React$Component);

    function CheckboxGroupField() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, CheckboxGroupField);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CheckboxGroupField)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleChange", function (event) {
        var _this$props = _this.props,
            field = _this$props.field,
            form = _this$props.form,
            multiple = _this$props.multiple,
            onChange = _this$props.onChange;
        var value;

        if (multiple) {
          value = toggle(_this.filterValue(field.value), event.target.value);
        } else if (event.target.checked) {
          value = event.target.value;
        }

        field.onChange({
          target: {
            value: value,
            name: field.name
          }
        });

        if (onChange) {
          onChange(value, event);
        }

        if (!formik.getIn(form.touched, field.name)) {
          form.setFieldTouched(field.name);
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "filterValue", function (value) {
        var optionValues = _this.props.options.map(function (option) {
          return option.value;
        });

        return value.filter(function (v) {
          return optionValues.includes(v);
        });
      });

      return _this;
    }

    _createClass(CheckboxGroupField, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props2 = this.props,
            field = _this$props2.field,
            _this$props2$form = _this$props2.form,
            touched = _this$props2$form.touched,
            errors = _this$props2$form.errors,
            options = _this$props2.options,
            multiple = _this$props2.multiple,
            label = _this$props2.label,
            row = _this$props2.row,
            helperText = _this$props2.helperText,
            FormLabelProps = _this$props2.FormLabelProps,
            FormHelperTextProps = _this$props2.FormHelperTextProps,
            FormControlLabelProps = _this$props2.FormControlLabelProps,
            CheckboxProps = _this$props2.CheckboxProps,
            FormGroupProps = _this$props2.FormGroupProps,
            onChange = _this$props2.onChange,
            className = _this$props2.className,
            classes = _this$props2.classes,
            props = _objectWithoutProperties(_this$props2, ["field", "form", "options", "multiple", "label", "row", "helperText", "FormLabelProps", "FormHelperTextProps", "FormControlLabelProps", "CheckboxProps", "FormGroupProps", "onChange", "className", "classes"]);

        var message = formik.getIn(touched, field.name) && formik.getIn(errors, field.name);
        return React.createElement(FormControl, _extends({
          className: classnames(_defineProperty({}, classes.rowContainer, row === 'all'), className),
          error: Boolean(message)
        }, props), label && React.createElement(FormLabel, _extends({}, FormLabelProps, {
          className: classnames(_defineProperty({}, classes.rowLabel, row === 'all'), FormLabelProps && FormLabelProps.className)
        }), label), React.createElement(FormGroup, _extends({}, FormGroupProps, {
          row: Boolean(row)
        }), options.map(function (option) {
          return React.createElement(FormControlLabel, _extends({
            key: option.value,
            control: React.createElement(Checkbox, _extends({}, CheckboxProps, {
              value: option.value,
              onChange: _this2.handleChange,
              checked: multiple ? field.value.includes(option.value) : option.value === field.value
            }))
          }, FormControlLabelProps, {
            label: option.label
          }));
        })), (message || helperText) && React.createElement(FormHelperText, _extends({}, FormHelperTextProps, {
          className: classnames(_defineProperty({}, classes.rowHelperText, row === 'all'), FormHelperTextProps && FormHelperTextProps.className)
        }), message || helperText));
      }
    }]);

    return CheckboxGroupField;
  }(React.Component);

  _defineProperty(CheckboxGroupField, "defaultProps", {
    row: false,
    multiple: false
  });

  {
    CheckboxGroupField.propTypes = {
      field: fieldShape.isRequired,
      form: formShape.isRequired,
      options: propTypes.arrayOf(optionShape).isRequired,
      multiple: propTypes.bool,
      row: propTypes.oneOf([true, false, 'all']),
      label: propTypes.node,
      helperText: propTypes.node,
      onChange: propTypes.func,
      CheckboxProps: propTypes.object,
      FormGroupProps: propTypes.object,
      FormLabelProps: propTypes.object,
      FormHelperTextProps: propTypes.object,
      FormControlLabelProps: propTypes.object,
      className: propTypes.string,
      classes: propTypes.object.isRequired
    };
  }

  var CheckboxGroupField$1 = styles.withStyles(s)(CheckboxGroupField);

  var ControlField =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(ControlField, _React$Component);

    function ControlField() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, ControlField);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ControlField)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleChange", function (event, checked) {
        var _this$props = _this.props,
            field = _this$props.field,
            form = _this$props.form,
            trueValue = _this$props.trueValue,
            falseValue = _this$props.falseValue,
            onChange = _this$props.onChange;
        var value = checked ? trueValue : falseValue;
        field.onChange({
          target: {
            value: value,
            name: field.name
          }
        });

        if (onChange) {
          onChange(value, event);
        }

        if (!formik.getIn(form.touched, field.name)) {
          form.setFieldTouched(field.name);
        }
      });

      return _this;
    }

    _createClass(ControlField, [{
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            field = _this$props2.field,
            _this$props2$form = _this$props2.form,
            touched = _this$props2$form.touched,
            errors = _this$props2$form.errors,
            trueValue = _this$props2.trueValue,
            falseValue = _this$props2.falseValue,
            label = _this$props2.label,
            controlLabel = _this$props2.controlLabel,
            Control = _this$props2.controlComponent,
            row = _this$props2.row,
            helperText = _this$props2.helperText,
            FormLabelProps = _this$props2.FormLabelProps,
            FormHelperTextProps = _this$props2.FormHelperTextProps,
            FormControlLabelProps = _this$props2.FormControlLabelProps,
            ControlProps = _this$props2.ControlProps,
            onChange = _this$props2.onChange,
            className = _this$props2.className,
            classes = _this$props2.classes,
            props = _objectWithoutProperties(_this$props2, ["field", "form", "trueValue", "falseValue", "label", "controlLabel", "controlComponent", "row", "helperText", "FormLabelProps", "FormHelperTextProps", "FormControlLabelProps", "ControlProps", "onChange", "className", "classes"]);

        var message = formik.getIn(touched, field.name) && formik.getIn(errors, field.name);
        return React.createElement(FormControl, _extends({
          className: classnames(_defineProperty({}, classes.rowContainer, row), className),
          error: Boolean(message)
        }, props), label && React.createElement(FormLabel, _extends({}, FormLabelProps, {
          className: classnames(_defineProperty({}, classes.rowLabel, row), FormLabelProps && FormLabelProps.className)
        }), label), React.createElement(FormControlLabel, _extends({
          control: React.createElement(Control, _extends({}, ControlProps, {
            value: trueValue,
            onChange: this.handleChange,
            checked: trueValue === field.value
          })),
          label: controlLabel
        }, FormControlLabelProps)), (message || helperText) && React.createElement(FormHelperText, _extends({}, FormHelperTextProps, {
          className: classnames(_defineProperty({}, classes.rowHelperText, row), FormHelperTextProps && FormHelperTextProps.className)
        }), message || helperText));
      }
    }]);

    return ControlField;
  }(React.Component);

  _defineProperty(ControlField, "defaultProps", {
    trueValue: true,
    falseValue: false
  });

  {
    ControlField.propTypes = {
      field: fieldShape.isRequired,
      form: formShape.isRequired,
      row: propTypes.bool,
      trueValue: propTypes.any,
      falseValue: propTypes.any,
      label: propTypes.node,
      controlLabel: propTypes.node,
      controlComponent: propTypes.any.isRequired,
      helperText: propTypes.node,
      onChange: propTypes.func,
      ControlProps: propTypes.object,
      FormLabelProps: propTypes.object,
      FormHelperTextProps: propTypes.object,
      FormControlLabelProps: propTypes.object,
      className: propTypes.string,
      classes: propTypes.object.isRequired
    };
  }

  var ControlField$1 = styles.withStyles(s)(ControlField);

  var FormikCheckboxField = function FormikCheckboxField(_ref) {
    var render = _ref.render,
        props = _objectWithoutProperties(_ref, ["render"]);

    return React.createElement(formik.Field, _extends({}, props, {
      component: ControlField$1,
      controlComponent: Checkbox
    }));
  };

  {
    FormikCheckboxField.propTypes = {
      render: propTypes.func
    };
  }

  var FormikCheckboxGroupField = function FormikCheckboxGroupField(_ref) {
    var render = _ref.render,
        props = _objectWithoutProperties(_ref, ["render"]);

    return React.createElement(formik.Field, _extends({}, props, {
      component: CheckboxGroupField$1
    }));
  };

  {
    FormikCheckboxGroupField.propTypes = {
      render: propTypes.func
    };
  }

  var FormikRadioField = function FormikRadioField(_ref) {
    var render = _ref.render,
        props = _objectWithoutProperties(_ref, ["render"]);

    return React.createElement(formik.Field, _extends({}, props, {
      component: ControlField$1,
      controlComponent: Radio
    }));
  };

  {
    FormikRadioField.propTypes = {
      render: propTypes.func
    };
  }

  var RadioGroupField =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(RadioGroupField, _React$Component);

    function RadioGroupField() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, RadioGroupField);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RadioGroupField)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleChange", function (event) {
        var _this$props = _this.props,
            field = _this$props.field,
            form = _this$props.form,
            onChange = _this$props.onChange;
        field.onChange(event);

        if (onChange) {
          onChange(event.target.value, event);
        }

        if (!formik.getIn(form.touched, field.name)) {
          form.setFieldTouched(field.name);
        }
      });

      return _this;
    }

    _createClass(RadioGroupField, [{
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            _this$props2$field = _this$props2.field,
            fieldOnChange = _this$props2$field.onChange,
            onBlur = _this$props2$field.onBlur,
            field = _objectWithoutProperties(_this$props2$field, ["onChange", "onBlur"]),
            _this$props2$form = _this$props2.form,
            touched = _this$props2$form.touched,
            errors = _this$props2$form.errors,
            options = _this$props2.options,
            label = _this$props2.label,
            row = _this$props2.row,
            helperText = _this$props2.helperText,
            FormLabelProps = _this$props2.FormLabelProps,
            FormHelperTextProps = _this$props2.FormHelperTextProps,
            FormControlLabelProps = _this$props2.FormControlLabelProps,
            RadioProps = _this$props2.RadioProps,
            RadioGroupProps = _this$props2.RadioGroupProps,
            onChange = _this$props2.onChange,
            className = _this$props2.className,
            classes = _this$props2.classes,
            props = _objectWithoutProperties(_this$props2, ["field", "form", "options", "label", "row", "helperText", "FormLabelProps", "FormHelperTextProps", "FormControlLabelProps", "RadioProps", "RadioGroupProps", "onChange", "className", "classes"]);

        var message = formik.getIn(touched, field.name) && formik.getIn(errors, field.name);
        return React.createElement(FormControl, _extends({
          className: classnames(_defineProperty({}, classes.rowContainer, row === 'all'), className),
          error: Boolean(message)
        }, props), label && React.createElement(FormLabel, _extends({}, FormLabelProps, {
          className: classnames(_defineProperty({}, classes.rowLabel, row === 'all'), FormLabelProps && FormLabelProps.className)
        }), label), React.createElement(RadioGroup, _extends({}, RadioGroupProps, field, {
          onChange: this.handleChange,
          row: Boolean(row)
        }), options.map(function (option) {
          return React.createElement(FormControlLabel, _extends({
            key: option.value,
            control: React.createElement(Radio, RadioProps)
          }, FormControlLabelProps, {
            value: option.value,
            label: option.label
          }));
        })), (message || helperText) && React.createElement(FormHelperText, _extends({}, FormHelperTextProps, {
          className: classnames(_defineProperty({}, classes.rowHelperText, row === 'all'), FormHelperTextProps && FormHelperTextProps.className)
        }), message || helperText));
      }
    }]);

    return RadioGroupField;
  }(React.Component);

  _defineProperty(RadioGroupField, "defaultProps", {
    row: false
  });

  {
    RadioGroupField.propTypes = {
      field: fieldShape.isRequired,
      form: formShape.isRequired,
      options: propTypes.arrayOf(optionShape).isRequired,
      row: propTypes.oneOf([true, false, 'all']),
      label: propTypes.node,
      helperText: propTypes.node,
      onChange: propTypes.func,
      RadioProps: propTypes.object,
      RadioGroupProps: propTypes.object,
      FormLabelProps: propTypes.object,
      FormHelperTextProps: propTypes.object,
      FormControlLabelProps: propTypes.object,
      className: propTypes.string,
      classes: propTypes.object.isRequired
    };
  }

  var RadioGroupField$1 = styles.withStyles(s)(RadioGroupField);

  var FormikRadioGroupField = function FormikRadioGroupField(_ref) {
    var render = _ref.render,
        props = _objectWithoutProperties(_ref, ["render"]);

    return React.createElement(formik.Field, _extends({}, props, {
      component: RadioGroupField$1
    }));
  };

  {
    FormikRadioGroupField.propTypes = {
      render: propTypes.func
    };
  }

  var TextField =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(TextField, _React$Component);

    function TextField() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, TextField);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TextField)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleChange", function (event) {
        _this.props.field.onChange(event);

        if (_this.props.onChange) {
          _this.props.onChange(event);
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleBlur", function (event) {
        _this.props.field.onBlur(event);

        if (_this.props.onBlur) {
          _this.props.onBlur(event);
        }
      });

      return _this;
    }

    _createClass(TextField, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            field = _this$props.field,
            _this$props$form = _this$props.form,
            touched = _this$props$form.touched,
            errors = _this$props$form.errors,
            helperText = _this$props.helperText,
            children = _this$props.children,
            props = _objectWithoutProperties(_this$props, ["field", "form", "helperText", "children"]);

        var message = formik.getIn(touched, field.name) && formik.getIn(errors, field.name);
        return React.createElement(MatTextField, _extends({}, props, field, {
          error: Boolean(message),
          helperText: message || helperText,
          onChange: this.handleChange,
          onBlur: this.handleBlur
        }), children);
      }
    }]);

    return TextField;
  }(React.Component);

  {
    TextField.propTypes = {
      field: fieldShape.isRequired,
      form: formShape.isRequired,
      helperText: propTypes.node,
      children: propTypes.node,
      onChange: propTypes.func,
      onBlur: propTypes.func
    };
  }

  var SelectField = function SelectField(_ref) {
    var options = _ref.options,
        _ref$multiple = _ref.multiple,
        multiple = _ref$multiple === void 0 ? false : _ref$multiple,
        _ref$native = _ref.native,
        native = _ref$native === void 0 ? false : _ref$native,
        InputLabelProps = _ref.InputLabelProps,
        SelectProps = _ref.SelectProps,
        props = _objectWithoutProperties(_ref, ["options", "multiple", "native", "InputLabelProps", "SelectProps"]);

    var isNative = !multiple && native;
    return React.createElement(TextField, _extends({}, props, {
      InputLabelProps: _objectSpread({
        shrink: isNative === true ? true : undefined
      }, InputLabelProps),
      SelectProps: _objectSpread({}, SelectProps, {
        multiple: multiple,
        native: isNative
      }),
      select: true
    }), isNative ? options.map(function (option) {
      return React.createElement("option", {
        key: option.value,
        value: option.value
      }, option.label);
    }) : options.map(function (option) {
      return React.createElement(MenuItem, {
        key: option.value,
        value: option.value
      }, option.label);
    }));
  };

  {
    SelectField.propTypes = {
      options: propTypes.arrayOf(optionShape).isRequired,
      multiple: propTypes.bool,
      native: propTypes.bool,
      InputLabelProps: propTypes.object,
      SelectProps: propTypes.object
    };
  }

  var FormikSelectField = function FormikSelectField(_ref) {
    var render = _ref.render,
        props = _objectWithoutProperties(_ref, ["render"]);

    return React.createElement(formik.Field, _extends({}, props, {
      component: SelectField
    }));
  };

  {
    FormikSelectField.propTypes = {
      render: propTypes.func
    };
  }

  var FormikSwitchField = function FormikSwitchField(_ref) {
    var render = _ref.render,
        props = _objectWithoutProperties(_ref, ["render"]);

    return React.createElement(formik.Field, _extends({}, props, {
      component: ControlField$1,
      controlComponent: Switch
    }));
  };

  {
    FormikSwitchField.propTypes = {
      render: propTypes.func
    };
  }

  var FormikTextField = function FormikTextField(_ref) {
    var children = _ref.children,
        render = _ref.render,
        props = _objectWithoutProperties(_ref, ["children", "render"]);

    return React.createElement(formik.Field, _extends({}, props, {
      component: TextField
    }), children);
  };

  {
    FormikTextField.propTypes = {
      children: propTypes.node,
      render: propTypes.func
    };
  }

  exports.CheckboxGroupField = CheckboxGroupField$1;
  exports.ControlField = ControlField$1;
  exports.FormikCheckboxField = FormikCheckboxField;
  exports.FormikCheckboxGroupField = FormikCheckboxGroupField;
  exports.FormikRadioField = FormikRadioField;
  exports.FormikRadioGroupField = FormikRadioGroupField;
  exports.FormikSelectField = FormikSelectField;
  exports.FormikSwitchField = FormikSwitchField;
  exports.FormikTextField = FormikTextField;
  exports.RadioGroupField = RadioGroupField$1;
  exports.SelectField = SelectField;
  exports.TextField = TextField;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
