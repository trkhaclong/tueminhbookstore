function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { getIn } from 'formik';
import Radio from '@material-ui/core/Radio';
import RadioGroup from '@material-ui/core/RadioGroup';
import FormControl from '@material-ui/core/FormControl';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import FormHelperText from '@material-ui/core/FormHelperText';
import FormLabel from '@material-ui/core/FormLabel';
import { withStyles } from '@material-ui/core/styles';
import { fieldShape, formShape, optionShape } from '../utils/PropTypes';
import s from '../utils/rowStyles';

var RadioGroupField =
/*#__PURE__*/
function (_React$Component) {
  _inherits(RadioGroupField, _React$Component);

  function RadioGroupField() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, RadioGroupField);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RadioGroupField)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleChange", function (event) {
      var _this$props = _this.props,
          field = _this$props.field,
          form = _this$props.form,
          onChange = _this$props.onChange;
      field.onChange(event);

      if (onChange) {
        onChange(event.target.value, event);
      }

      if (!getIn(form.touched, field.name)) {
        form.setFieldTouched(field.name);
      }
    });

    return _this;
  }

  _createClass(RadioGroupField, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          _this$props2$field = _this$props2.field,
          fieldOnChange = _this$props2$field.onChange,
          onBlur = _this$props2$field.onBlur,
          field = _objectWithoutProperties(_this$props2$field, ["onChange", "onBlur"]),
          _this$props2$form = _this$props2.form,
          touched = _this$props2$form.touched,
          errors = _this$props2$form.errors,
          options = _this$props2.options,
          label = _this$props2.label,
          row = _this$props2.row,
          helperText = _this$props2.helperText,
          FormLabelProps = _this$props2.FormLabelProps,
          FormHelperTextProps = _this$props2.FormHelperTextProps,
          FormControlLabelProps = _this$props2.FormControlLabelProps,
          RadioProps = _this$props2.RadioProps,
          RadioGroupProps = _this$props2.RadioGroupProps,
          onChange = _this$props2.onChange,
          className = _this$props2.className,
          classes = _this$props2.classes,
          props = _objectWithoutProperties(_this$props2, ["field", "form", "options", "label", "row", "helperText", "FormLabelProps", "FormHelperTextProps", "FormControlLabelProps", "RadioProps", "RadioGroupProps", "onChange", "className", "classes"]);

      var message = getIn(touched, field.name) && getIn(errors, field.name);
      return React.createElement(FormControl, _extends({
        className: cx(_defineProperty({}, classes.rowContainer, row === 'all'), className),
        error: Boolean(message)
      }, props), label && React.createElement(FormLabel, _extends({}, FormLabelProps, {
        className: cx(_defineProperty({}, classes.rowLabel, row === 'all'), FormLabelProps && FormLabelProps.className)
      }), label), React.createElement(RadioGroup, _extends({}, RadioGroupProps, field, {
        onChange: this.handleChange,
        row: Boolean(row)
      }), options.map(function (option) {
        return React.createElement(FormControlLabel, _extends({
          key: option.value,
          control: React.createElement(Radio, RadioProps)
        }, FormControlLabelProps, {
          value: option.value,
          label: option.label
        }));
      })), (message || helperText) && React.createElement(FormHelperText, _extends({}, FormHelperTextProps, {
        className: cx(_defineProperty({}, classes.rowHelperText, row === 'all'), FormHelperTextProps && FormHelperTextProps.className)
      }), message || helperText));
    }
  }]);

  return RadioGroupField;
}(React.Component);

_defineProperty(RadioGroupField, "defaultProps", {
  row: false
});

if (process.env.NODE_ENV !== 'production') {
  RadioGroupField.propTypes = {
    field: fieldShape.isRequired,
    form: formShape.isRequired,
    options: PropTypes.arrayOf(optionShape).isRequired,
    row: PropTypes.oneOf([true, false, 'all']),
    label: PropTypes.node,
    helperText: PropTypes.node,
    onChange: PropTypes.func,
    RadioProps: PropTypes.object,
    RadioGroupProps: PropTypes.object,
    FormLabelProps: PropTypes.object,
    FormHelperTextProps: PropTypes.object,
    FormControlLabelProps: PropTypes.object,
    className: PropTypes.string,
    classes: PropTypes.object.isRequired
  };
}

export default withStyles(s)(RadioGroupField);