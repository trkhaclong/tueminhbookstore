"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _formik = require("formik");

var _FormControl = _interopRequireDefault(require("@material-ui/core/FormControl"));

var _FormControlLabel = _interopRequireDefault(require("@material-ui/core/FormControlLabel"));

var _FormHelperText = _interopRequireDefault(require("@material-ui/core/FormHelperText"));

var _FormLabel = _interopRequireDefault(require("@material-ui/core/FormLabel"));

var _styles = require("@material-ui/core/styles");

var _PropTypes = require("../utils/PropTypes");

var _rowStyles = _interopRequireDefault(require("../utils/rowStyles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ControlField =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ControlField, _React$Component);

  function ControlField() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ControlField);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ControlField)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleChange", function (event, checked) {
      var _this$props = _this.props,
          field = _this$props.field,
          form = _this$props.form,
          trueValue = _this$props.trueValue,
          falseValue = _this$props.falseValue,
          onChange = _this$props.onChange;
      var value = checked ? trueValue : falseValue;
      field.onChange({
        target: {
          value: value,
          name: field.name
        }
      });

      if (onChange) {
        onChange(value, event);
      }

      if (!(0, _formik.getIn)(form.touched, field.name)) {
        form.setFieldTouched(field.name);
      }
    });

    return _this;
  }

  _createClass(ControlField, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          field = _this$props2.field,
          _this$props2$form = _this$props2.form,
          touched = _this$props2$form.touched,
          errors = _this$props2$form.errors,
          trueValue = _this$props2.trueValue,
          falseValue = _this$props2.falseValue,
          label = _this$props2.label,
          controlLabel = _this$props2.controlLabel,
          Control = _this$props2.controlComponent,
          row = _this$props2.row,
          helperText = _this$props2.helperText,
          FormLabelProps = _this$props2.FormLabelProps,
          FormHelperTextProps = _this$props2.FormHelperTextProps,
          FormControlLabelProps = _this$props2.FormControlLabelProps,
          ControlProps = _this$props2.ControlProps,
          onChange = _this$props2.onChange,
          className = _this$props2.className,
          classes = _this$props2.classes,
          props = _objectWithoutProperties(_this$props2, ["field", "form", "trueValue", "falseValue", "label", "controlLabel", "controlComponent", "row", "helperText", "FormLabelProps", "FormHelperTextProps", "FormControlLabelProps", "ControlProps", "onChange", "className", "classes"]);

      var message = (0, _formik.getIn)(touched, field.name) && (0, _formik.getIn)(errors, field.name);
      return _react.default.createElement(_FormControl.default, _extends({
        className: (0, _classnames.default)(_defineProperty({}, classes.rowContainer, row), className),
        error: Boolean(message)
      }, props), label && _react.default.createElement(_FormLabel.default, _extends({}, FormLabelProps, {
        className: (0, _classnames.default)(_defineProperty({}, classes.rowLabel, row), FormLabelProps && FormLabelProps.className)
      }), label), _react.default.createElement(_FormControlLabel.default, _extends({
        control: _react.default.createElement(Control, _extends({}, ControlProps, {
          value: trueValue,
          onChange: this.handleChange,
          checked: trueValue === field.value
        })),
        label: controlLabel
      }, FormControlLabelProps)), (message || helperText) && _react.default.createElement(_FormHelperText.default, _extends({}, FormHelperTextProps, {
        className: (0, _classnames.default)(_defineProperty({}, classes.rowHelperText, row), FormHelperTextProps && FormHelperTextProps.className)
      }), message || helperText));
    }
  }]);

  return ControlField;
}(_react.default.Component);

_defineProperty(ControlField, "defaultProps", {
  trueValue: true,
  falseValue: false
});

if (process.env.NODE_ENV !== 'production') {
  ControlField.propTypes = {
    field: _PropTypes.fieldShape.isRequired,
    form: _PropTypes.formShape.isRequired,
    row: _propTypes.default.bool,
    trueValue: _propTypes.default.any,
    falseValue: _propTypes.default.any,
    label: _propTypes.default.node,
    controlLabel: _propTypes.default.node,
    controlComponent: _propTypes.default.any.isRequired,
    helperText: _propTypes.default.node,
    onChange: _propTypes.default.func,
    ControlProps: _propTypes.default.object,
    FormLabelProps: _propTypes.default.object,
    FormHelperTextProps: _propTypes.default.object,
    FormControlLabelProps: _propTypes.default.object,
    className: _propTypes.default.string,
    classes: _propTypes.default.object.isRequired
  };
}

var _default = (0, _styles.withStyles)(_rowStyles.default)(ControlField);

exports.default = _default;